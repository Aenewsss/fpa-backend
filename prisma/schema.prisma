generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  password           String
  role               Role     @default(EDITOR)
  mustChangePassword Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  firstName          String
  lastName           String
  jobRole            String?
  Post               Post[]
  removed            Boolean  @default(false)
}

model UserInvited {
  id              String    @id @default(uuid())
  email           String
  invitationToken String    @unique
  status          String    @default("pending")
  invitedAt       DateTime  @default(now())
  used            Boolean   @default(false)
  expiresAt       DateTime
  role            String?
  acceptedAt      DateTime? @db.Timestamp(6)
}

enum Role {
  ADMIN
  MAIN_EDITOR
  EDITOR
  READER
}

enum PostStatus {
  revision
  posted
  removed
  draft
}

model Post {
  id            String     @id @default(uuid())
  postTitle     String
  postContent   Json
  postDate      DateTime   @default(now())
  postAuthorId  String
  postAuthor    User       @relation(fields: [postAuthorId], references: [id])
  postStatus    PostStatus
  commentCounts Int        @default(0)

  articleAuthorId String
  articleAuthor   Author @relation(fields: [articleAuthorId], references: [id])

  postParentId String?
  postParent   Post?   @relation("PostToParent", fields: [postParentId], references: [id])
  children     Post[]  @relation("PostToParent")

  postCategoryId String
  postCategory   Category @relation("PostCategory", fields: [postCategoryId], references: [id])

  relatedTags  Tag[]   @relation("PostTags")
  thumbnailUrl String?
  slug         String
  summary      String?
  isFeatured   Boolean @default(false)
  isArticle    Boolean @default(false)
  viewCount    Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  removed Boolean @default(false)

  views Int @default(0)
}

model Category {
  id           String     @id @default(uuid())
  name         String
  slug         String     @unique
  description  String?
  parentId     String?
  parent       Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[] @relation("CategoryHierarchy")
  thumbnailUrl String?
  order        Int        @default(0)
  isVisible    Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  posts        Post[]     @relation("PostCategory")
  removed      Boolean    @default(false)
  color        String     @default("#000")
  isFeatured   Boolean    @default(false)
}

model Tag {
  id        String   @id @default(uuid())
  name      String
  color     String   @default("#000")
  slug      String   @unique
  removed   Boolean  @default(false)
  posts     Post[]   @relation("PostTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        String   @id @default(uuid())
  imageUrl  String
  text      String?
  link      String?
  order     Int      @unique @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  removed   Boolean  @default(false)
}

model Video {
  id          String   @id @default(uuid())
  description String
  url         String   @default("")
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  removed     Boolean  @default(false)
  embed       String   @default("")
}

model Webstory {
  id            String   @id @default(uuid())
  title         String
  coverImageUrl String? // thumbnail opcional
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isFeatured    Boolean  @default(false)
  removed       Boolean  @default(false)
  order         Int      @unique @default(0)

  slides WebstorySlide[] @relation("WebstoryToSlides")
}

model WebstorySlide {
  id         String   @id @default(uuid())
  imageUrl   String
  text       String?
  order      Int // para definir a ordem dos slides
  webstoryId String
  webstory   Webstory @relation("WebstoryToSlides", fields: [webstoryId], references: [id], onDelete: Cascade)
}

model Relevant {
  id            String   @id @default(uuid())
  title         String
  videoUrl      String
  coverImageUrl String? // thumbnail opcional
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  removed       Boolean  @default(false)
  order         Int      @unique @default(0)
}

model Magazine {
  id         String @id @default(uuid())
  pdfUrl     String
  previewUrl String
}

model NewsletterSubscription {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
}

model Live {
  id        String  @id @default(uuid())
  link      String
  isEnabled Boolean @default(false)
}

model Pauta {
  id       String @id @default(uuid())
  imageUrl String
}

model UsageTermsPage {
  id      String @id @default(uuid())
  content Json
}

model ContactPage {
  id      String @id @default(uuid())
  content Json
}

model AboutPage {
  id      String @id @default(uuid())
  content Json
}

model Author {
  id        String   @id @default(uuid())
  name      String
  photoUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  removed   Boolean  @default(false)
  Post      Post[]
}
